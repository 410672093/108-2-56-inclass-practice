back_regex
```
若你的答案正確，執行以下程式會得到一個段兄，一個段兄弟。
```{r}
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
```
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
#br2_regrex <-
#####back_regex <- glue::glue("{target_regex}(?=^{br1_regex})")
back_regex <- glue::glue("{target_regex}(?!br1_regex)")
str_extract(twoNames,back_regex)
#class(back_regex)
#back_regrex <- paste0(br1_regrex,br2_regrex)
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
str_extract(twoNames,back_regex)
#class(back_regex)
#back_regrex <- paste0(br1_regrex,br2_regrex)
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
str_extract(twoNames,back_regex)
str_extract(twoNames,pattern = back_regex)
#class(back_regex)
#back_regrex <- paste0(br1_regrex,br2_regrex)
back_regex
target_regex <- "段(兄|兄弟)"
br1_regex <- "弟+"
#br2_regrex <-
#####back_regex <- glue::glue("{target_regex}(?=^{br1_regex})")
back_regex <- glue::glue("{target_regex}(?!br1_regex)")
str_extract(twoNames,back_regex)
#class(back_regex)
#back_regrex <- paste0(br1_regrex,br2_regrex)
back_regex
#class(back_regex)
#back_regrex <- paste0(br1_regrex,br2_regrex)
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
str(semiGodsSemiDevils)
context_picked <- semiGodsSemiDevils$data[[1]]$text[[2]]
context_picked
textExample <- c("段1......。　　段2....。")
str_split(context_picked,"[\\s]+")
str_split(context_picked,"[\\s]+")
context_picked_split
str_split(context_picked,"[\\s]+") -> context_picked_split
context_picked_split
str_extract_all(context_picked,"段+")
str_extract_all(context_picked,"段[2,4]")
str_extract_all(context_picked,"段+")
str_extract_all(context_picked_split,"段+")
str_extract_all(context_picked_split,pattern = duan)
duan <- "段"
str_extract_all(context_picked_split,pattern = duan)
# mention_duan
str_extract_all(context_picked_split,duan)
str_split(context_picked,"[\\s]+") -> context_picked_split
context_picked_split
str_extract_all(context_picked_split[[1]],duan)
str_extract_all(context_picked_split[[1]],"duan")
str_extract_all(context_picked_split[1],"duan")
#target_regex <- "[0-9]+"
#A_regex <- "民國"
#B_regex <- "年"
#glue在一起
#regex_pattern <- glue::glue("(?<={A_regex}){target_regex}(?={B_regex})")
context_picked_split %in% "段"
#target_regex <- "[0-9]+"
#A_regex <- "民國"
#B_regex <- "年"
#glue在一起
#regex_pattern <- glue::glue("(?<={A_regex}){target_regex}(?={B_regex})")
context_picked_split[[1]] %in% "段"
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
context_picked <- semiGodsSemiDevils$data[[1]]$text[[2]]
context_picked
str_split(context_picked,"[\\s]+") -> context_picked_split
context_picked_split
str_extract_all(context_picked_split[[1]],"duan")
# mention_duan
str_count(context_picked_split[[1]],"段")
str_count(context_picked_split[1],"段")
]
str_count(context_picked_split[[1]],"段")
context_picked_split[[1]]
context_picked_split[[1]][[1]]
context_picked_split[[1]]
str_count(context_picked_split[[1]],"段")
str(semiGodsSemiDevils)
str(semiGodsSemiDevils$data)
str(semiGodsSemiDevils$data[[1]])
str(semiGodsSemiDevils$data[[1]]$text[[3]])
context_picked
str(semiGodsSemiDevils$data[[1]]$text[[3]])
View(semiGodsSemiDevils$data[[1]]$text[[3]])
context_picked <- semiGodsSemiDevils$data[[1]]$text[[3]]
context_picked
str_split(context_picked,"[\\s]+") -> context_picked_split
context_picked_split
str_extract_all(context_picked_split[[1]],"duan")
str_count(context_picked_split[[1]],"段")
sum(str_count(context_picked_split[[1]],"段"))
str_extract_all(context_picked_split[[1]],"duan")
#str_extract_all(context_picked_split[[1]],"duan")
str_count(context_picked_split[[1]][[1:14]],"段")
#str_extract_all(context_picked_split[[1]],"duan")
str_count(context_picked_split[[1]][1:14],"段")
#str_extract_all(context_picked_split[[1]],"duan")
str(context_picked_split[[1]][1:14],"段")
str_count(heartSutra,"(異|色)") # 計數
#str_extract_all(context_picked_split[[1]],"duan")
str_count(context_picked_split[[1]],"段")
#str_extract_all(context_picked_split[[1]],"duan")
str_extract_all(context_picked_split[[1]],"段")
str_extract(Ids,"[ac]")
str_extract(Ids,"[:lower:]")
str_extract(Ids,"[:digit:]")
# 取出學號中的入學屆為107或108
str_extract_all(studentIds,"(107|108)")
#str_extract_all(context_picked_split[[1]],"duan")
str_extract_all(context_picked_split[[1]],"段{2,3}")
#str_extract_all(context_picked_split[[1]],"duan")
str_extract_all(context_picked_split[[1]],"[段]+")
#str_extract_all(context_picked_split[[1]],"duan")
str_extract_all(context_picked_split[[1]],"[段]{5}")
#str_extract_all(context_picked_split[[1]],"duan")
str_extract_all(context_picked_split[[1]],"[段]+(譽|兄|兄弟|大哥|相公|君|的小子)")
levels(duans)
#str_extract_all(context_picked_split[[1]],"duan")
str_extract_all(context_picked_split[[1]],"[段]+(譽|兄|兄弟|大哥|相公|君|的小子)") -> duans
levels(duans)
# mention_duan
# mention_duan
class(duans)
#str_extract_all(context_picked_split[[1]],"duan")
str_extract_all(context_picked_split[[1]],"[段]+(譽|兄|兄弟|大哥|相公|君|的小子)") -> mention_duan
mention_duan
unlist(mention_duan)
table(unlist(mention_duan))
table(unlist(mention_duan)) -> table_duan
table_duan
#br2_regrex <-
#####back_regex <- glue::glue("{target_regex}(?=^{br1_regex})")
back_regex <- glue::glue("{target_regex}(?=br1_regex)")
str_extract(twoNames,back_regex)
#class(back_regex)
#back_regrex <- paste0(br1_regrex,br2_regrex)
back_regex
#br2_regrex <-
#####back_regex <- glue::glue("{target_regex}(?=^{br1_regex})")
back_regex <- glue::glue("{target_regex}(?=br1_regex)")
str_extract(twoNames,back_regex)
#br2_regrex <-
#####back_regex <- glue::glue("{target_regex}(?=^{br1_regex})")
back_regex <- glue::glue("{target_regex}(?!br1_regex)")
str_extract(twoNames,back_regex)
#class(back_regex)
#back_regrex <- paste0(br1_regrex,br2_regrex)
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
#br2_regrex <-
#####back_regex <- glue::glue("{target_regex}(?=^{br1_regex})")
back_regex <- glue::glue("{target_regex}+[^br1_regex]")
str_extract(twoNames,back_regex)
#class(back_regex)
#back_regrex <- paste0(br1_regrex,br2_regrex)
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
#br2_regrex <-
#####back_regex <- glue::glue("{target_regex}(?=^{br1_regex})")
back_regex <- glue::glue("{target_regex}+[br1_regex]")
str_extract(twoNames,back_regex)
#class(back_regex)
#back_regrex <- paste0(br1_regrex,br2_regrex)
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
#br2_regrex <-
#####back_regex <- glue::glue("{target_regex}(?=^{br1_regex})")
back_regex <- glue::glue("{target_regex}+br1_regex")
str_extract(twoNames,back_regex)
#class(back_regex)
#back_regrex <- paste0(br1_regrex,br2_regrex)
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
#target_regex <- "[0-9]+"
#A_regex <- "民國"
#B_regex <- "年"
#glue在一起
#regex_pattern <- glue::glue("(?<={A_regex}){target_regex}(?={B_regex})")
target_regex <- "段(兄|兄弟)"
br1_regex <- "弟"
#br2_regrex <-
#####back_regex <- glue::glue("{target_regex}(?=^{br1_regex})")
back_regex <- glue::glue("{target_regex}+!br1_regex")
str_extract(twoNames,back_regex)
#class(back_regex)
#back_regrex <- paste0(br1_regrex,br2_regrex)
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
#br2_regrex <-
#####back_regex <- glue::glue("{target_regex}(?=^{br1_regex})")
back_regex <- glue::glue("{target_regex}+!弟")
str_extract(twoNames,back_regex)
#class(back_regex)
#back_regrex <- paste0(br1_regrex,br2_regrex)
back_regex
#target_regex <- "[0-9]+"
#A_regex <- "民國"
#B_regex <- "年"
#glue在一起
#regex_pattern <- glue::glue("(?<={A_regex}){target_regex}(?={B_regex})")
target_regex <- "段(兄|兄弟)"
br1_regex <- "弟"
#br2_regrex <-
#####back_regex <- glue::glue("{target_regex}(?=^{br1_regex})")
back_regex <- glue::glue("{target_regex}+!弟")
str_extract(twoNames,back_regex)
#class(back_regex)
#back_regrex <- paste0(br1_regrex,br2_regrex)
back_regex
## 1. 兄/兄弟
小明想自twoNames中取出段兄及段兄弟兩個稱號，執行完以下結果他得到兩個「段兄」，第二個段兄應該要有弟：
```{r data1}
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
```
請在小明的target regex後面加上「後面鄰居不能有弟」的regex描述並存在back_regex (class character) 裡. (hint: 查cheat sheet look around)
```{r ans1}
#target_regex <- "[0-9]+"
#A_regex <- "民國"
#B_regex <- "年"
#glue在一起
#regex_pattern <- glue::glue("(?<={A_regex}){target_regex}(?={B_regex})")
target_regex <- "段(兄|兄弟)"
br1_regex <- "弟"
#br2_regrex <-
#####back_regex <- glue::glue("{target_regex}(?=^{br1_regex})")
back_regex <- glue::glue("{target_regex}+!弟")
str_extract(twoNames,back_regex)
#class(back_regex)
#back_regrex <- paste0(br1_regrex,br2_regrex)
back_regex
```
若你的答案正確，執行以下程式會得到一個段兄，一個段兄弟。
```{r}
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
```
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
#class(back_regex)
#back_regrex <- paste0(br1_regrex,br2_regrex)
back_regex
#br2_regrex <-
#####back_regex <- glue::glue("{target_regex}(?=^{br1_regex})")
back_regex <- glue::glue("{target_regex}+![弟]")
str_extract(twoNames,back_regex)
#class(back_regex)
#back_regrex <- paste0(br1_regrex,br2_regrex)
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
#target_regex <- "[0-9]+"
#A_regex <- "民國"
#B_regex <- "年"
#glue在一起
#regex_pattern <- glue::glue("(?<={A_regex}){target_regex}(?={B_regex})")
target_regex <- "段(兄|兄弟)"
br1_regex <- "弟"
#br2_regrex <-
#####back_regex <- glue::glue("{target_regex}(?=^{br1_regex})")
back_regex <- glue::glue("{target_regex}![弟]")
str_extract(twoNames,back_regex)
#class(back_regex)
#back_regrex <- paste0(br1_regrex,br2_regrex)
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
#target_regex <- "[0-9]+"
#A_regex <- "民國"
#B_regex <- "年"
#glue在一起
#regex_pattern <- glue::glue("(?<={A_regex}){target_regex}(?={B_regex})")
target_regex <- "段(兄|兄弟)"
br1_regex <- "弟"
#br2_regrex <-
#####back_regex <- glue::glue("{target_regex}(?=^{br1_regex})")
back_regex <- glue::glue("{target_regex}[^弟]")
str_extract(twoNames,back_regex)
#class(back_regex)
#back_regrex <- paste0(br1_regrex,br2_regrex)
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
myRegexSlotMachine <- "[0-9]+號"
print(myRegexSlotMachine)
str_extract(addresses,myRegexSlotMachine)
#myRegexSlotMachine <- "[0-9]+號"
#br2_regrex <-
#####back_regex <- glue::glue("{target_regex}(?=^{br1_regex})")
back_regex <- glue::glue("{target_regex}[^br1_regex]")
#target_regex <- "[0-9]+"
#A_regex <- "民國"
#B_regex <- "年"
#glue在一起
#regex_pattern <- glue::glue("(?<={A_regex}){target_regex}(?={B_regex})")
target_regex <- "段(兄|兄弟)"
br1_regex <- "弟"
#myRegexSlotMachine <- "[0-9]+號"
#br2_regrex <-
#####back_regex <- glue::glue("{target_regex}(?=^{br1_regex})")
back_regex <- glue::glue("{target_regex}[^br1_regex]")
str_extract(twoNames,back_regex)
#class(back_regex)
#back_regrex <- paste0(br1_regrex,br2_regrex)
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
#target_regex <- "[0-9]+"
#A_regex <- "民國"
#B_regex <- "年"
#glue在一起
#regex_pattern <- glue::glue("(?<={A_regex}){target_regex}(?={B_regex})")
target_regex <- "段(兄|兄弟)"
br1_regex <- "弟"
#myRegexSlotMachine <- "[0-9]+號"
#br2_regrex <-
#####back_regex <- glue::glue("{target_regex}(?=^{br1_regex})")
back_regex <- glue::glue("{target_regex}(^br1_regex)")
str_extract(twoNames,back_regex)
#class(back_regex)
#back_regrex <- paste0(br1_regrex,br2_regrex)
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
#target_regex <- "[0-9]+"
#A_regex <- "民國"
#B_regex <- "年"
#glue在一起
#regex_pattern <- glue::glue("(?<={A_regex}){target_regex}(?={B_regex})")
target_regex <- "段(兄|兄弟)"
br1_regex <- "弟"
#myRegexSlotMachine <- "[0-9]+號"##alt("[^abe]")
#br2_regrex <-
#####back_regex <- glue::glue("{target_regex}(?=^{br1_regex})")
back_regex <- glue::glue("{target_regex}("[^br1_regex]")")
#target_regex <- "[0-9]+"
#A_regex <- "民國"
#B_regex <- "年"
#glue在一起
#regex_pattern <- glue::glue("(?<={A_regex}){target_regex}(?={B_regex})")
target_regex <- "段(兄|兄弟)"
br1_regex <- "弟"
#myRegexSlotMachine <- "[0-9]+號"##alt("[^abe]") look("a(?!c)")
#br2_regrex <-
#####back_regex <- glue::glue("{target_regex}(?=^{br1_regex})")
back_regex <- glue::glue("{target_regex}("[br1_regex]")")
#target_regex <- "[0-9]+"
#A_regex <- "民國"
#B_regex <- "年"
#glue在一起
#regex_pattern <- glue::glue("(?<={A_regex}){target_regex}(?={B_regex})")
target_regex <- "段(兄|兄弟)"
br1_regex <- "弟"
#myRegexSlotMachine <- "[0-9]+號"##alt("[^abe]") look("a(?!c)")
#br2_regrex <-
#####back_regex <- glue::glue("{target_regex}(?=^{br1_regex})")
back_regex <- glue::glue("{target_regex}(?!br1_regex)")
str_extract(twoNames,back_regex)
#class(back_regex)
#back_regrex <- paste0(br1_regrex,br2_regrex)
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
back_regex
#target_regex <- "[0-9]+"
#A_regex <- "民國"
#B_regex <- "年"
#glue在一起
#regex_pattern <- glue::glue("(?<={A_regex}){target_regex}(?={B_regex})")
target_regex <- "段(兄|兄弟)"
br1_regex <- "弟"
#myRegexSlotMachine <- "[0-9]+號"##alt("[^abe]") look("a(?!c)")
#br2_regrex <-
#####back_regex <- glue::glue("{target_regex}(?=^{br1_regex})")
back_regex <- glue::glue("{target_regex}(?!{br1_regex})")
str_extract(twoNames,back_regex)
#class(back_regex)
#back_regrex <- paste0(br1_regrex,br2_regrex)
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
str_extract_all(twoNames,back_regex)
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
#target_regex <- "[0-9]+"
#A_regex <- "民國"
#B_regex <- "年"
#glue在一起
#regex_pattern <- glue::glue("(?<={A_regex}){target_regex}(?={B_regex})")
target_regex <- "段(兄|兄弟)"
br1_regex <- "弟"
#myRegexSlotMachine <- "[0-9]+號"##alt("[^abe]") look("a(?!c)")
#br2_regrex <-
#####back_regex <- glue::glue("{target_regex}(?=^{br1_regex})")
#back_regex <- glue::glue("{target_regex}(?!{br1_regex})")
back_regex <- glue::glue("{target_regex}(?!{br1_regex})")
str_extract_all(twoNames,back_regex)
#class(back_regex)
#back_regrex <- paste0(br1_regrex,br2_regrex)
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
#target_regex <- "[0-9]+"
#A_regex <- "民國"
#B_regex <- "年"
#glue在一起
#regex_pattern <- glue::glue("(?<={A_regex}){target_regex}(?={B_regex})")
target_regex <- "段(兄|兄弟)"
br1_regex <- "弟"
#myRegexSlotMachine <- "[0-9]+號"##alt("[^abe]") look("a(?!c)")
#br2_regrex <-
#####back_regex <- glue::glue("{target_regex}(?=^{br1_regex})")
#back_regex <- glue::glue("{target_regex}(?!{br1_regex})")
back_regex <- glue::glue("{target_regex}(?!{br1_regex})")
str_extract_all(twoNames,back_regex)
#class(back_regex)
#back_regrex <- paste0(br1_regrex,br2_regrex)
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
class(back_regex)
#back_regex <- glue::glue("{target_regex}(?!{br1_regex})")
#back_regex <- glue::glue("{target_regex}(?!{br1_regex})")66666666
back_regex <- "(?!{br1_regex})"
#str_extract_all(twoNames,back_regex)66666666
#class(back_regex)
#back_regrex <- paste0(br1_regrex,br2_regrex)
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
#back_regex <- glue::glue("{target_regex}(?!{br1_regex})")
#back_regex <- glue::glue("{target_regex}(?!{br1_regex})")66666666
back_regex <- "?!{br1_regex}"
#back_regex <- glue::glue("{target_regex}(?!{br1_regex})")
#back_regex <- glue::glue("{target_regex}(?!{br1_regex})")66666666
back_regex <- "?!{br1_regex}"
#str_extract_all(twoNames,back_regex)66666666
#class(back_regex)
#back_regrex <- paste0(br1_regrex,br2_regrex)
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
#str_extract_all(twoNames,back_regex)66666666
class(back_regex)
#target_regex <- "[0-9]+"
#A_regex <- "民國"
#B_regex <- "年"
#glue在一起
#regex_pattern <- glue::glue("(?<={A_regex}){target_regex}(?={B_regex})")
target_regex <- "段(兄|兄弟)"
br1_regex <- "弟"
#myRegexSlotMachine <- "[0-9]+號"##alt("[^abe]") look("a(?!c)")
#br2_regrex <-
#####back_regex <- glue::glue("{target_regex}(?=^{br1_regex})")
#back_regex <- glue::glue("{target_regex}(?!{br1_regex})")
#back_regex <- glue::glue("{target_regex}(?!{br1_regex})")66666666
back_regex <- "?!{br1_regex}"
#str_extract_all(twoNames,back_regex)66666666
#class(back_regex)
#back_regrex <- paste0(br1_regrex,br2_regrex)
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
paste0("段(兄|兄弟)",back_regex)
paste0("段(兄|兄弟)",back_regex) -> pattern
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
str_extract_all(twoNames,back_regex)
#target_regex <- "[0-9]+"
#A_regex <- "民國"
#B_regex <- "年"
#glue在一起
#regex_pattern <- glue::glue("(?<={A_regex}){target_regex}(?={B_regex})")
target_regex <- "段(兄|兄弟)"
br1_regex <- "弟"
#myRegexSlotMachine <- "[0-9]+號"##alt("[^abe]") look("a(?!c)")
#br2_regrex <-
#####back_regex <- glue::glue("{target_regex}(?=^{br1_regex})")
#back_regex <- glue::glue("{target_regex}(?!{br1_regex})")
back_regex <- glue::glue("{target_regex}(?!{br1_regex})")
#back_regex <- "?!{br1_regex}"
str_extract_all(twoNames,back_regex)
#class(back_regex)
#back_regrex <- paste0(br1_regrex,br2_regrex)
back_regex
